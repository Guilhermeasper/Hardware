module MultBox(HI, LO, InRegA, InRegB, clock, reset, MultCtrl);
		
	input wire clock, reset, MultCtrl;
	input wire[31:0] InRegA, InRegB;
	output reg[31:0] HI, LO;
	integer Shift;
	reg[64:0] Prod, A65b;
	
	always @(posedge clock) begin
		if (reset == 1) begin
			HI = 32'b0;
			LO = 32'b0;
			A65b = 65'b0;
			Prod = 65'b0;
			Shift = 0;
		end
		if (MultCtrl == 1) begin
			HI = 32'b0;
			LO = 32'b0;
			A65b = {InRegA, 33'b0};
			Prod = {32'b0, InRegB, 1'b0};
			Shift = 0;
		end
		case(Prod[1:0])
			2'b11: begin
				if (Shift < 32) begin
					Prod = Prod >> 1;
					Shift = Shift + 1;
				end
			end
			2'b00: begin
				if (Shift < 32) begin
					Prod = Prod >> 1;
					Shift = Shift + 1;
				end
			end
			2'b01: begin
				if (Shift < 32) begin
					Prod = Prod + A65b;
					Prod = Prod >> 1;
					Shift = Shift + 1;
				end
			end
			2'b10: begin
				if (Shift < 32) begin
					Prod = Prod - A65b;
					Prod = Prod >> 1;
					Shift = Shift + 1;
				end
			end
		endcase
		if(Prod[63] == 1) begin // Garantir que seja negativo
			Prod[64] = 1;
		end
		if(Shift == 32) begin
			HI = Prod[64:33];
			LO = Prod[32:1];
		end
	end
endmodule 